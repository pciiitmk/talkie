package labs.pc.talkie.utils;

import labs.pc.talkie.R;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;

/**
 * This class contains methods for common code reuse.
 * @author Prashant Chaturvedi
 *
 */
public final class TalkieUtils {
	/**
	 * This enum defines the constants for the title of the alert dialog.
	 * @author Prashant Chaturvedi
	 *
	 */
	public static enum AlertLevel {
		INFO (R.string.talkie_common_alert_title_info, "Information"), 
		WARNING (R.string.talkie_common_alert_title_warning, "Warning"), 
		ERROR (R.string.talkie_common_alert_title_error, "Error");
		
		// Integer reference to the String resource
		private int code;
		// String title of the resource.
		private String alertLevel;
		
		private AlertLevel (int code, String alertLevel) {
			this.code = code;
			this.alertLevel = alertLevel;
		}
		
		@Override
		public String toString () {
			return this.alertLevel;
		}
		
		public int getIntCode () {
			return this.code;
		}
	}
	
	// Do not instantiate this class
	private TalkieUtils () {}
	
	/**
	 * Specific call to the showAlert to display error messages.
	 * @param context
	 * @param rMessage
	 */
	public static final void showError (Context context, int rMessage) {
		showAlert (context, AlertLevel.ERROR, rMessage);
	}
	
	/**
	 * 
	 * @param context
	 * @param customTitle
	 * @param rMessage
	 */
	public static final void showError (Context context, int customTitle, int rMessage) {
		showAlert (context, customTitle, rMessage);
	}
	
	/**
	 * Show alert dialog box to the user. It has information and a Ok button. This method takes
	 * context, alertLevel and an integer string resource constant for showing result. This is the
	 * most common case of displaying alerts whose message is generated by the application.
	 * @param context
	 * @param alertLevel
	 * @param rMessage
	 */
	public static final void showAlert (Context context, AlertLevel alertLevel, int rMessage) {
		showAlert(context, alertLevel.getIntCode(), rMessage);
	}
	
	/**
	 * Show alert dialog box to the user. It has information and a Ok button. This method takes
	 * context, alertLevel and string resource for showing result. This is the case of displaying 
	 * alerts whose message is not generated by the application. An example would be displaying 
	 * message from the remote server as parse.com
	 * @param context
	 * @param alertLevel
	 * @param rMessage
	 */
	public static final void showAlert (Context context, AlertLevel alertLevel, String message) {
		showAlert (context, alertLevel.getIntCode(), message);
	}
	
	/**
	 * Show alert dialog box to the user. It has information and a Ok button. This method takes
	 * context, alertLevel and an integer string resource constant for showing result. This is the
	 * most common case of displaying alerts whose message is generated by the application.
	 * @param context
	 * @param customTitle
	 * @param rMessage
	 */
	public static final void showAlert (Context context, int customTitle, int rMessage) {
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder (context);
		alertDialogBuilder.setTitle(customTitle)
				.setMessage(rMessage);
		AlertDialog alert = alertDialogBuilder.create();
		alert.show();
	}
	
	/**
	 * Show alert dialog box to the user. It has information and a Ok button. This method takes
	 * context, alertLevel and string resource for showing result. This is the case of displaying 
	 * alerts whose message is not generated by the application. An example would be displaying 
	 * message from the remote server as parse.com
	 * @param context
	 * @param customTitle
	 * @param message
	 */
	public static final void showAlert (Context context, int customTitle, String message) {
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder (context);
		alertDialogBuilder.setTitle(customTitle)
				.setMessage(message);
		AlertDialog alert = alertDialogBuilder.create();
		alert.show();
	}
	
	/**
	 * This is a helper method for starting a new activity such that the new activity does NOT start
	 * as a new task. This leaves the old activity on the Android's backstack.
	 * @param context
	 * @param newActivity
	 */
	public static final void navigate (Context context, Class<? extends Activity> newActivity) {
		navigate(context, newActivity, false);
	}
	
	/**
	 * Starts a new activity from the current context. The boolean flag could be set of the new
	 * activity is to be started as a new task. Starting a new activity as a new task removes the
	 * current activity from the android backstack.
	 * @param context
	 * @param newActivity
	 * @param shouldRemoveFromBackstack
	 */
	public static final void navigate (Context context, 
			Class<? extends Activity> newActivity, boolean shouldRemoveFromBackstack) {
		Intent intent = new Intent (context, newActivity);
		if (shouldRemoveFromBackstack) {
			intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
			intent.addFlags(intent.FLAG_ACTIVITY_NEW_TASK);
		}
		context.startActivity(intent);
	}
}
